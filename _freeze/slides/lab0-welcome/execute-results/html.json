{
  "hash": "09a8a7eb1956c475baafab4d6e84145f",
  "result": {
    "markdown": "---\ntitle: \"Welcome to Lab\"\nformat: revealjs\n---\n\n\n## Introductions\n\n\n::: {.cell}\n\n:::\n\n\n-   Meet the TA!\n\n-   Introduce yourself (icebreaker)\n\n-   Follow along these slides on the course website (under slides): [sta602-sp25.github.io](https://sta602-sp25.github.io)\n\n-   Bookmark this!\n    It's the course website.\n\n## What to expect in labs\n\n-   Discussion\n-   Practice problems\n-   Assistance on computing portion of homeworks\n\n## Tips\n\n-   Show up.\n-   Make use of [office hours](https://sta602-sp25.github.io/syllabus.html). Before you need help!\n\n\n## Beginnings\n\nWhile this is not a computing class, computers are the workhorse of Bayesian statistics and we will use R to both enhance understanding of fundamental course material as well as to implement models to learn about real data sets.\n\n## Set up RStudio\n\n### Option 1 (easiest): RStudio container\n\n- Go to [https://cmgr.oit.duke.edu/containers](https://cmgr.oit.duke.edu/containers) and login with your Duke NetID and Password.\n- Click `RStudio` to log into the Docker container. You should now see the RStudio environment.\n\nIf you haven't previously done so, you will need to reserve a container for `RStudio` first.\n\n\n## Set up RStudio\n\n### Option 2: RStudio on your computer\n\n- Download `R` from [http://www.r-project.org/](http://www.r-project.org/).\n\n- Download RStudio, the popular IDE for R, from [https://posit.co/downloads/](https://posit.co/downloads/).\n\n- (optionally) download Quarto from [https://quarto.org/docs/get-started/](https://quarto.org/docs/get-started/)\n\n## Demo\n\nNext, check your familarity with R/RStudio fundamentals [here](/labs/lab0.html). You can also find a link to this from the [course schedule](/index.html) under \"Assignment\".\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}